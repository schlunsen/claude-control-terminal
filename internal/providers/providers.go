// Package providers manages AI provider configurations for Claude Code.
// It handles provider selection, API key storage, and environment variable generation.
package providers

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"time"
)

// Provider represents an AI provider with its configuration
type Provider struct {
	Name    string // Display name (e.g., "DeepSeek", "GLM")
	ID      string // Internal identifier (e.g., "deepseek", "glm")
	BaseURL string // API base URL for Anthropic-compatible endpoint
	Icon    string // Emoji icon for display
}

// ProviderConfig represents the saved provider configuration
type ProviderConfig struct {
	ProviderID string    `json:"provider_id"`
	APIKey     string    `json:"api_key"`
	CustomURL  string    `json:"custom_url,omitempty"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// GetAvailableProviders returns the list of supported providers
func GetAvailableProviders() []Provider {
	return []Provider{
		{
			Name:    "Claude (Default)",
			ID:      "claude",
			BaseURL: "", // Default - no base URL override
			Icon:    "üü†",
		},
		{
			Name:    "DeepSeek",
			ID:      "deepseek",
			BaseURL: "https://api.deepseek.com/anthropic",
			Icon:    "üîÆ",
		},
		{
			Name:    "GLM",
			ID:      "glm",
			BaseURL: "https://open.bigmodel.cn/api/paas/v4/anthropic",
			Icon:    "üåü",
		},
		{
			Name:    "Kimi",
			ID:      "kimi",
			BaseURL: "https://api.moonshot.cn/v1/anthropic",
			Icon:    "üåô",
		},
		{
			Name:    "ChatGPT",
			ID:      "chatgpt",
			BaseURL: "https://api.openai.com/v1/anthropic",
			Icon:    "ü§ñ",
		},
		{
			Name:    "Custom",
			ID:      "custom",
			BaseURL: "", // User will provide custom URL
			Icon:    "‚öôÔ∏è",
		},
	}
}

// GetProviderByID returns a provider by its ID
func GetProviderByID(id string) *Provider {
	providers := GetAvailableProviders()
	for _, p := range providers {
		if p.ID == id {
			return &p
		}
	}
	return nil
}

// GetConfigPath returns the path to the providers configuration file
func GetConfigPath() string {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return filepath.Join(".claude", "providers.json")
	}
	return filepath.Join(homeDir, ".claude", "providers.json")
}

// LoadProviderConfig loads the provider configuration from disk
func LoadProviderConfig() (*ProviderConfig, error) {
	configPath := GetConfigPath()

	data, err := os.ReadFile(configPath)
	if err != nil {
		if os.IsNotExist(err) {
			// No configuration exists yet
			return nil, nil
		}
		return nil, fmt.Errorf("failed to read provider config: %w", err)
	}

	var config ProviderConfig
	if err := json.Unmarshal(data, &config); err != nil {
		return nil, fmt.Errorf("failed to parse provider config: %w", err)
	}

	return &config, nil
}

// SaveProviderConfig saves the provider configuration to disk
func SaveProviderConfig(config *ProviderConfig) error {
	configPath := GetConfigPath()

	// Ensure the directory exists
	configDir := filepath.Dir(configPath)
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return fmt.Errorf("failed to create config directory: %w", err)
	}

	// Set updated timestamp
	config.UpdatedAt = time.Now()

	// Marshal with indentation for readability
	data, err := json.MarshalIndent(config, "", "  ")
	if err != nil {
		return fmt.Errorf("failed to marshal config: %w", err)
	}

	if err := os.WriteFile(configPath, data, 0600); err != nil {
		return fmt.Errorf("failed to write config file: %w", err)
	}

	return nil
}

// GetEnvScriptPath returns the path to the environment export script
func GetEnvScriptPath() string {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return filepath.Join(".claude", "provider-env.sh")
	}
	return filepath.Join(homeDir, ".claude", "provider-env.sh")
}

// GenerateEnvScript generates a shell script to export environment variables
func GenerateEnvScript(config *ProviderConfig) error {
	if config == nil {
		return fmt.Errorf("no provider configuration provided")
	}

	provider := GetProviderByID(config.ProviderID)
	if provider == nil {
		return fmt.Errorf("unknown provider: %s", config.ProviderID)
	}

	scriptPath := GetEnvScriptPath()

	// Special handling for Claude (default) - clear environment variables
	if provider.ID == "claude" {
		script := fmt.Sprintf(`#!/bin/bash
# Generated by Claude Control Terminal
# Provider: Claude (Default)
# Updated: %s

# Unset custom provider environment variables to use Claude defaults
unset ANTHROPIC_AUTH_TOKEN
unset ANTHROPIC_BASE_URL

echo "‚úì Environment configured for Claude (Default)"
echo "  Using default Claude API configuration"
`,
			config.UpdatedAt.Format("2006-01-02 15:04:05"),
		)

		// Ensure the directory exists
		scriptDir := filepath.Dir(scriptPath)
		if err := os.MkdirAll(scriptDir, 0755); err != nil {
			return fmt.Errorf("failed to create script directory: %w", err)
		}

		// Write script with executable permissions
		if err := os.WriteFile(scriptPath, []byte(script), 0700); err != nil {
			return fmt.Errorf("failed to write env script: %w", err)
		}

		return nil
	}

	// Determine the base URL for other providers
	baseURL := provider.BaseURL
	if provider.ID == "custom" && config.CustomURL != "" {
		baseURL = config.CustomURL
	}

	if baseURL == "" {
		return fmt.Errorf("no base URL configured for provider")
	}

	// Generate script content for custom providers
	script := fmt.Sprintf(`#!/bin/bash
# Generated by Claude Control Terminal
# Provider: %s
# Updated: %s

export ANTHROPIC_AUTH_TOKEN="%s"
export ANTHROPIC_BASE_URL="%s"

echo "‚úì Environment configured for %s"
echo "  ANTHROPIC_AUTH_TOKEN=***%s"
echo "  ANTHROPIC_BASE_URL=%s"
`,
		provider.Name,
		config.UpdatedAt.Format("2006-01-02 15:04:05"),
		config.APIKey,
		baseURL,
		provider.Name,
		maskAPIKey(config.APIKey),
		baseURL,
	)

	scriptPath = GetEnvScriptPath()

	// Ensure the directory exists
	scriptDir := filepath.Dir(scriptPath)
	if err := os.MkdirAll(scriptDir, 0755); err != nil {
		return fmt.Errorf("failed to create script directory: %w", err)
	}

	// Write script with executable permissions
	if err := os.WriteFile(scriptPath, []byte(script), 0700); err != nil {
		return fmt.Errorf("failed to write env script: %w", err)
	}

	return nil
}

// maskAPIKey returns a masked version of the API key for display
func maskAPIKey(apiKey string) string {
	if len(apiKey) <= 8 {
		return "****"
	}
	return apiKey[len(apiKey)-4:]
}

// GetCurrentProviderInfo returns display information about the current provider
func GetCurrentProviderInfo() (providerName string, isConfigured bool, err error) {
	config, err := LoadProviderConfig()
	if err != nil {
		return "", false, err
	}

	if config == nil {
		return "", false, nil
	}

	provider := GetProviderByID(config.ProviderID)
	if provider == nil {
		return config.ProviderID, true, nil
	}

	return provider.Name, true, nil
}

// DeleteProviderConfig removes the provider configuration
func DeleteProviderConfig() error {
	configPath := GetConfigPath()
	scriptPath := GetEnvScriptPath()

	// Remove config file
	if err := os.Remove(configPath); err != nil && !os.IsNotExist(err) {
		return fmt.Errorf("failed to remove config: %w", err)
	}

	// Remove env script
	if err := os.Remove(scriptPath); err != nil && !os.IsNotExist(err) {
		return fmt.Errorf("failed to remove env script: %w", err)
	}

	return nil
}
