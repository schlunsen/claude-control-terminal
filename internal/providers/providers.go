// Package providers manages AI provider configurations for Claude Code.
// It handles provider selection, API key storage, and environment variable generation.
package providers

import (
	_ "embed"
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"

	"github.com/schlunsen/claude-control-terminal/internal/database"
)

//go:embed providers.json
var providersJSON []byte

// Provider represents an AI provider with its configuration
type Provider struct {
	Name         string   `json:"name"`          // Display name (e.g., "DeepSeek", "GLM")
	ID           string   `json:"id"`            // Internal identifier (e.g., "deepseek", "glm")
	BaseURL      string   `json:"base_url"`      // API base URL for Anthropic-compatible endpoint
	Icon         string   `json:"icon"`          // Emoji icon for display
	Models       []string `json:"models"`        // Available models for this provider
	DefaultModel string   `json:"default_model"` // Default model to use
	Description  string   `json:"description"`   // Description of the provider
}

// ProvidersConfig represents the structure of the providers.json file
type ProvidersConfig struct {
	Providers []Provider `json:"providers"`
}

// GetAvailableProviders returns the list of supported providers loaded from JSON
func GetAvailableProviders() []Provider {
	var config ProvidersConfig
	if err := json.Unmarshal(providersJSON, &config); err != nil {
		// Fallback to empty list on error (should never happen with embedded JSON)
		fmt.Fprintf(os.Stderr, "Error loading providers config: %v\n", err)
		return []Provider{}
	}
	return config.Providers
}

// GetProviderByID returns a provider by its ID
func GetProviderByID(id string) *Provider {
	providers := GetAvailableProviders()
	for _, p := range providers {
		if p.ID == id {
			return &p
		}
	}
	return nil
}

// GetEnvScriptPath returns the path to the environment export script
func GetEnvScriptPath() string {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return filepath.Join(".claude", "provider-env.sh")
	}
	return filepath.Join(homeDir, ".claude", "provider-env.sh")
}

// LoadProviderConfig loads the current provider configuration from database
func LoadProviderConfig(repo *database.Repository) (*database.ProviderConfig, error) {
	return repo.GetCurrentProvider()
}

// GetProviderConfig retrieves the configuration for a specific provider from database
func GetProviderConfig(repo *database.Repository, providerID string) (*database.ProviderConfig, error) {
	return repo.GetProvider(providerID)
}

// SaveProviderConfig saves the provider configuration to database
func SaveProviderConfig(repo *database.Repository, config *database.ProviderConfig) error {
	return repo.SaveProvider(config)
}

// GenerateEnvScript generates a shell script to export environment variables
func GenerateEnvScript(config *database.ProviderConfig) error {
	if config == nil {
		return fmt.Errorf("no provider configuration provided")
	}

	provider := GetProviderByID(config.ProviderID)
	if provider == nil {
		return fmt.Errorf("unknown provider: %s", config.ProviderID)
	}

	scriptPath := GetEnvScriptPath()

	// Special handling for Claude (default) - clear environment variables
	if provider.ID == "claude" {
		var script string
		if config.ModelName != "" {
			// User selected a specific model for Claude
			script = fmt.Sprintf(`#!/bin/bash
# Generated by Claude Control Terminal
# Provider: Claude (Default)
# Updated: %s

# Unset custom provider environment variables to use Claude defaults
unset ANTHROPIC_AUTH_TOKEN
unset ANTHROPIC_BASE_URL

# Set specific model
export ANTHROPIC_MODEL="%s"

echo "✓ Environment configured for Claude (Default)"
echo "  Using default Claude API configuration"
echo "  Model: %s"
`,
				config.UpdatedAt.Format("2006-01-02 15:04:05"),
				config.ModelName,
				config.ModelName,
			)
		} else {
			// No specific model selected, unset everything
			script = fmt.Sprintf(`#!/bin/bash
# Generated by Claude Control Terminal
# Provider: Claude (Default)
# Updated: %s

# Unset custom provider environment variables to use Claude defaults
unset ANTHROPIC_AUTH_TOKEN
unset ANTHROPIC_BASE_URL
unset ANTHROPIC_MODEL

echo "✓ Environment configured for Claude (Default)"
echo "  Using default Claude API configuration"
`,
				config.UpdatedAt.Format("2006-01-02 15:04:05"),
			)
		}

		// Ensure the directory exists
		scriptDir := filepath.Dir(scriptPath)
		if err := os.MkdirAll(scriptDir, 0755); err != nil {
			return fmt.Errorf("failed to create script directory: %w", err)
		}

		// Write script with executable permissions
		if err := os.WriteFile(scriptPath, []byte(script), 0700); err != nil {
			return fmt.Errorf("failed to write env script: %w", err)
		}

		return nil
	}

	// Determine the base URL for other providers
	baseURL := provider.BaseURL
	if provider.ID == "custom" && config.CustomURL != "" {
		baseURL = config.CustomURL
	}

	if baseURL == "" {
		return fmt.Errorf("no base URL configured for provider")
	}

	// Use the model from config only if explicitly set
	// Don't fall back to provider default - user may have chosen "No model"
	model := config.ModelName

	// Generate script content for custom providers
	var script string
	if model != "" {
		script = fmt.Sprintf(`#!/bin/bash
# Generated by Claude Control Terminal
# Provider: %s
# Updated: %s

export ANTHROPIC_AUTH_TOKEN="%s"
export ANTHROPIC_BASE_URL="%s"
export ANTHROPIC_MODEL="%s"

echo "✓ Environment configured for %s"
echo "  ANTHROPIC_AUTH_TOKEN=***%s"
echo "  ANTHROPIC_BASE_URL=%s"
echo "  ANTHROPIC_MODEL=%s"
`,
			provider.Name,
			config.UpdatedAt.Format("2006-01-02 15:04:05"),
			config.APIKey,
			baseURL,
			model,
			provider.Name,
			maskAPIKey(config.APIKey),
			baseURL,
			model,
		)
	} else {
		script = fmt.Sprintf(`#!/bin/bash
# Generated by Claude Control Terminal
# Provider: %s
# Updated: %s

export ANTHROPIC_AUTH_TOKEN="%s"
export ANTHROPIC_BASE_URL="%s"

echo "✓ Environment configured for %s"
echo "  ANTHROPIC_AUTH_TOKEN=***%s"
echo "  ANTHROPIC_BASE_URL=%s"
`,
			provider.Name,
			config.UpdatedAt.Format("2006-01-02 15:04:05"),
			config.APIKey,
			baseURL,
			provider.Name,
			maskAPIKey(config.APIKey),
			baseURL,
		)
	}

	scriptPath = GetEnvScriptPath()

	// Ensure the directory exists
	scriptDir := filepath.Dir(scriptPath)
	if err := os.MkdirAll(scriptDir, 0755); err != nil {
		return fmt.Errorf("failed to create script directory: %w", err)
	}

	// Write script with executable permissions
	if err := os.WriteFile(scriptPath, []byte(script), 0700); err != nil {
		return fmt.Errorf("failed to write env script: %w", err)
	}

	return nil
}

// maskAPIKey returns a masked version of the API key for display
func maskAPIKey(apiKey string) string {
	if len(apiKey) <= 8 {
		return "****"
	}
	return apiKey[len(apiKey)-4:]
}

// GetCurrentProviderInfo returns display information about the current provider
func GetCurrentProviderInfo(repo *database.Repository) (providerName string, isConfigured bool, err error) {
	config, err := repo.GetCurrentProvider()
	if err != nil {
		return "", false, err
	}

	if config == nil {
		return "", false, nil
	}

	provider := GetProviderByID(config.ProviderID)
	if provider == nil {
		return config.ProviderID, true, nil
	}

	return provider.Name, true, nil
}

// DeleteProviderConfig removes the provider configuration
func DeleteProviderConfig(repo *database.Repository) error {
	scriptPath := GetEnvScriptPath()

	// Remove all providers from database
	if err := repo.DeleteAllProviders(); err != nil {
		return fmt.Errorf("failed to delete providers: %w", err)
	}

	// Remove env script
	if err := os.Remove(scriptPath); err != nil && !os.IsNotExist(err) {
		return fmt.Errorf("failed to remove env script: %w", err)
	}

	return nil
}
