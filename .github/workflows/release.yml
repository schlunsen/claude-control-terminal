name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT_NAME="dist/cct-${{ matrix.os }}-${{ matrix.arch }}.exe"
          else
            OUTPUT_NAME="dist/cct-${{ matrix.os }}-${{ matrix.arch }}"
          fi
          mkdir -p dist
          go build -ldflags="-s -w" -o "$OUTPUT_NAME" ./cmd/cct

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cct-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R dist

      - name: Generate SHA256 checksums
        id: checksums
        run: |
          cd dist
          echo "sha256_darwin_amd64=$(shasum -a 256 cct-darwin-amd64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "sha256_darwin_arm64=$(shasum -a 256 cct-darwin-arm64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "sha256_linux_amd64=$(shasum -a 256 cct-linux-amd64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "sha256_linux_arm64=$(shasum -a 256 cct-linux-arm64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          cd ..

      - name: Get version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate Homebrew formula
        run: |
          sed -e "s/{{VERSION}}/${{ steps.version.outputs.version }}/g" \
              -e "s/{{SHA256_DARWIN_AMD64}}/${{ steps.checksums.outputs.sha256_darwin_amd64 }}/g" \
              -e "s/{{SHA256_DARWIN_ARM64}}/${{ steps.checksums.outputs.sha256_darwin_arm64 }}/g" \
              -e "s/{{SHA256_LINUX_AMD64}}/${{ steps.checksums.outputs.sha256_linux_amd64 }}/g" \
              -e "s/{{SHA256_LINUX_ARM64}}/${{ steps.checksums.outputs.sha256_linux_arm64 }}/g" \
              .github/homebrew-formula.rb.template > dist/cct.rb

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Homebrew formula to tap
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          echo "ðŸ“¦ Homebrew formula generated at dist/cct.rb"
          echo "To publish to Homebrew tap, create a repository named 'homebrew-cct'"
          echo "and commit the formula file as Formula/cct.rb"
          cat dist/cct.rb

  build-on-push:
    name: Build on Push (no release)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT_NAME="dist/cct-${{ matrix.os }}-${{ matrix.arch }}.exe"
          else
            OUTPUT_NAME="dist/cct-${{ matrix.os }}-${{ matrix.arch }}"
          fi
          mkdir -p dist
          go build -ldflags="-s -w" -o "$OUTPUT_NAME" ./cmd/cct

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cct-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*
