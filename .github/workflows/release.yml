name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-linux:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build Nuxt frontend
        run: |
          cd internal/server/frontend
          npm ci
          npm run generate

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install cross-compilation tools
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        env:
          GOOS: linux
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
          CC: ${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-gcc' || 'gcc' }}
        run: |
          mkdir -p dist
          go build -ldflags="-s -w" -o "dist/cct-linux-${{ matrix.arch }}" ./cmd/cct

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cct-linux-${{ matrix.arch }}
          path: dist/*

  build-darwin:
    name: Build macOS Binaries
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build Nuxt frontend
        run: |
          cd internal/server/frontend
          npm ci
          npm run generate

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build binary
        env:
          GOOS: darwin
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          mkdir -p dist
          go build -ldflags="-s -w" -o "dist/cct-darwin-${{ matrix.arch }}" ./cmd/cct

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cct-darwin-${{ matrix.arch }}
          path: dist/*

  # build-windows:
  #   name: Build Windows Binary
  #   runs-on: windows-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Build Nuxt frontend
  #       run: |
  #         cd internal/server/frontend
  #         npm ci
  #         npm run generate

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.23'

  #     - name: Build binary
  #       env:
  #         GOOS: windows
  #         GOARCH: amd64
  #         CGO_ENABLED: 1
  #       run: |
  #         mkdir -p dist
  #         go build -ldflags="-s -w" -o "dist/cct-windows-amd64.exe" ./cmd/cct

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cct-windows-amd64
  #         path: dist/*

  release:
    name: Create Release
    needs: [build-linux, build-darwin]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R dist

      - name: Generate SHA256 checksums
        id: checksums
        run: |
          cd dist
          echo "sha256_darwin_amd64=$(shasum -a 256 cct-darwin-amd64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "sha256_darwin_arm64=$(shasum -a 256 cct-darwin-arm64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "sha256_linux_amd64=$(shasum -a 256 cct-linux-amd64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "sha256_linux_arm64=$(shasum -a 256 cct-linux-arm64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          cd ..

      - name: Get version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate Homebrew formula
        run: |
          sed -e "s/{{VERSION}}/${{ steps.version.outputs.version }}/g" \
              -e "s/{{SHA256_DARWIN_AMD64}}/${{ steps.checksums.outputs.sha256_darwin_amd64 }}/g" \
              -e "s/{{SHA256_DARWIN_ARM64}}/${{ steps.checksums.outputs.sha256_darwin_arm64 }}/g" \
              -e "s/{{SHA256_LINUX_AMD64}}/${{ steps.checksums.outputs.sha256_linux_amd64 }}/g" \
              -e "s/{{SHA256_LINUX_ARM64}}/${{ steps.checksums.outputs.sha256_linux_arm64 }}/g" \
              .github/homebrew-formula.rb.template > dist/cct.rb

      - name: Get release name from tag
        id: release_name
        run: |
          # Get the tag annotation message (first line only, excluding GPG signature)
          TAG_MESSAGE=$(git tag -l --format='%(contents:lines=1)' ${GITHUB_REF#refs/tags/})
          echo "tag_message=$TAG_MESSAGE" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          name: ${{ steps.release_name.outputs.tag_message }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Homebrew formula to tap
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          echo "ðŸ“¦ Homebrew formula generated at dist/cct.rb"
          echo "To publish to Homebrew tap, create a repository named 'homebrew-cct'"
          echo "and commit the formula file as Formula/cct.rb"
          cat dist/cct.rb
