name: CI

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'fix/**'
      - 'refactor/**'
      - 'docs/**'
      - 'test/**'
      - 'chore/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write  # For posting PR comments
  security-events: write  # For uploading SARIF results

jobs:
  test:
    name: Test on ${{ matrix.os }} with Go ${{ matrix.go-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.23', '1.24']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: internal/server/frontend/package-lock.json

    - name: Build Nuxt frontend
      run: |
        cd internal/server/frontend
        npm ci
        npm run generate

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests with race detector
      run: |
        # Run most tests with race detector
        go test -v -race -covermode=atomic -coverprofile=coverage.out $(go list ./... | grep -v '/internal/cmd')
        # Run cmd tests without race detector due to pterm spinner race condition (upstream issue)
        go test -v -covermode=atomic -coverprofile=coverage_cmd.out ./internal/cmd/...

    - name: Merge coverage files
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      run: |
        # Merge coverage files
        echo "mode: atomic" > coverage_merged.out
        grep -h -v "^mode:" coverage.out coverage_cmd.out >> coverage_merged.out || true
        mv coverage_merged.out coverage.out

    - name: Display coverage summary
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      run: go tool cover -func=coverage.out

    - name: Check coverage threshold
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
        if (( $(echo "$COVERAGE < 20" | bc -l) )); then
          echo "⚠️ Coverage is below 20% threshold"
          echo "coverage_status=warning" >> $GITHUB_OUTPUT
        else
          echo "✅ Coverage meets 20% threshold"
          echo "coverage_status=success" >> $GITHUB_OUTPUT
        fi
      id: coverage

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-${{ matrix.os }}-go${{ matrix.go-version }}
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: internal/server/frontend/package-lock.json

    - name: Build Nuxt frontend
      run: |
        cd internal/server/frontend
        npm ci
        npm run generate

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: internal/server/frontend/package-lock.json

    - name: Build Nuxt frontend
      run: |
        cd internal/server/frontend
        npm ci
        npm run generate

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      run: go build -v ./cmd/cct

    - name: Verify binary
      run: ./cct --help

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail ./...'

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, lint, build, security]
    if: always()

    steps:
    - name: Check results
      run: |
        echo "## CI Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.test.result }}" == "failure" ] || [ "${{ needs.lint.result }}" == "failure" ] || [ "${{ needs.build.result }}" == "failure" ]; then
          echo "❌ CI checks failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All CI checks passed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const results = {
            test: '${{ needs.test.result }}',
            lint: '${{ needs.lint.result }}',
            build: '${{ needs.build.result }}',
            security: '${{ needs.security.result }}'
          };

          const emoji = (status) => status === 'success' ? '✅' : status === 'failure' ? '❌' : '⚠️';

          const commitSha = '${{ github.sha }}';
          const body = `## CI Results

          | Job | Status |
          |-----|--------|
          | Tests | ${emoji(results.test)} ${results.test} |
          | Lint | ${emoji(results.lint)} ${results.lint} |
          | Build | ${emoji(results.build)} ${results.build} |
          | Security | ${emoji(results.security)} ${results.security} |

          ---
          *Triggered by commit ${commitSha.substring(0, 7)}*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
